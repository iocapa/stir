
out/stir.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	33 c0       	rjmp	.+102    	; 0x6e <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	84 c0       	rjmp	.+264    	; 0x114 <__vector_5>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	3a c0       	rjmp	.+116    	; 0x84 <__vector_7>
  10:	17 c0       	rjmp	.+46     	; 0x40 <__vector_8>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	ab 37       	cpi	r26, 0x7B	; 123
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	cf d0       	rcall	.+414    	; 0x1da <main>
  3c:	2c c2       	rjmp	.+1112   	; 0x496 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_8>:
}

/************************************************************************
 * @brief ADC conversion complete IRQ
 */
ISR(ADC_vect) {
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
  4c:	9f 93       	push	r25
/************************************************************************
 * @brief Handler for the ADC conversion complete interrupt
 */
static void handle_adc_irq(void) {
	/* Copy the value */
	prog_data.adc_val = ADC;
  4e:	84 b1       	in	r24, 0x04	; 4
  50:	95 b1       	in	r25, 0x05	; 5
  52:	90 93 79 00 	sts	0x0079, r25
  56:	80 93 78 00 	sts	0x0078, r24

	/* Request a sync */
	prog_data.sync_req = TRUE;
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	80 93 7a 00 	sts	0x007A, r24
 * @brief ADC conversion complete IRQ
 */
ISR(ADC_vect) {
	/* Call the handler */
	handle_adc_irq();
}
  60:	9f 91       	pop	r25
  62:	8f 91       	pop	r24
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

0000006e <__vector_3>:

/************************************************************************
 * @brief Timer 1 compare interrupt
 */
ISR(TIM1_COMPA_vect) {
  6e:	1f 92       	push	r1
  70:	0f 92       	push	r0
  72:	0f b6       	in	r0, 0x3f	; 63
  74:	0f 92       	push	r0
  76:	11 24       	eor	r1, r1
/************************************************************************
 * @brief Handler for the sample timer interrupt
 */
static void handle_sample_timer_irq(void) {
	/* Start a new conversion */
	ADCSRA |= (1u << ADSC);
  78:	36 9a       	sbi	0x06, 6	; 6
 * @brief Timer 1 compare interrupt
 */
ISR(TIM1_COMPA_vect) {
	/* Call the handler */
	handle_sample_timer_irq();
}
  7a:	0f 90       	pop	r0
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	0f 90       	pop	r0
  80:	1f 90       	pop	r1
  82:	18 95       	reti

00000084 <__vector_7>:

/************************************************************************
 * @brief Analog comparator toggle interrupt
 */
ISR(ANA_COMP_vect) {
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	2f 93       	push	r18
  90:	3f 93       	push	r19
  92:	4f 93       	push	r20
  94:	5f 93       	push	r21
  96:	8f 93       	push	r24
  98:	9f 93       	push	r25
  9a:	af 93       	push	r26
  9c:	bf 93       	push	r27
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31

	/* Temporary timestamp */
	uint32_t tstamp;

	/* Get the low part */
	lval = TCNT0;
  a2:	22 b7       	in	r18, 0x32	; 50

	/* het the high part */
	hval = prog_data.cap_data.high_val;
  a4:	80 91 68 00 	lds	r24, 0x0068
  a8:	90 91 69 00 	lds	r25, 0x0069

	/* Clear the current values */
	prog_data.cap_data.high_val = 0;
  ac:	10 92 69 00 	sts	0x0069, r1
  b0:	10 92 68 00 	sts	0x0068, r1
	TCNT0 = 0;
  b4:	12 be       	out	0x32, r1	; 50

	/* Create the value */
	tstamp = ((uint32_t)hval << 8u) | lval;
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ba 2f       	mov	r27, r26
  bc:	a9 2f       	mov	r26, r25
  be:	98 2f       	mov	r25, r24
  c0:	88 27       	eor	r24, r24
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	82 2b       	or	r24, r18
  ca:	93 2b       	or	r25, r19
  cc:	a4 2b       	or	r26, r20
  ce:	b5 2b       	or	r27, r21
 * @brief Add element to capture queue
 * @param val
 */
static void add_in_cap_queue(uint32_t val) {
	/* Temporary queue index */
	uint8_t q_index = (prog_data.cap_data.index & (CAP_NUM_EVENTS - 1));
  d0:	e0 91 6a 00 	lds	r30, 0x006A

	/* Add it in the queue */
	prog_data.cap_data.ev_queue[q_index] = val;
  d4:	e1 70       	andi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	e0 5a       	subi	r30, 0xA0	; 160
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	80 83       	st	Z, r24
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	a2 83       	std	Z+2, r26	; 0x02
  ea:	b3 83       	std	Z+3, r27	; 0x03

	/* Increment the index */
	prog_data.cap_data.index++;
  ec:	80 91 6a 00 	lds	r24, 0x006A
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 6a 00 	sts	0x006A, r24
 * @brief Analog comparator toggle interrupt
 */
ISR(ANA_COMP_vect) {
	/* Call the handler */
	handle_capture_irq();
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	5f 91       	pop	r21
 104:	4f 91       	pop	r20
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_5>:

/************************************************************************
 * @brief Timer 0 overflow vector
 */
ISR(TIM0_OVF_vect) {
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
/************************************************************************
 * @brief Handler for the capture timer interrupt
 */
static void handle_capture_timer_irq(void) {
	/* limit overflow */
	if(prog_data.cap_data.high_val < (2000000u / 256u)) {
 132:	80 91 68 00 	lds	r24, 0x0068
 136:	90 91 69 00 	lds	r25, 0x0069
 13a:	84 58       	subi	r24, 0x84	; 132
 13c:	9e 41       	sbci	r25, 0x1E	; 30
 13e:	88 f5       	brcc	.+98     	; 0x1a2 <__vector_5+0x8e>
		/* Just increment the variable */
		prog_data.cap_data.high_val++;
 140:	80 91 68 00 	lds	r24, 0x0068
 144:	90 91 69 00 	lds	r25, 0x0069
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	90 93 69 00 	sts	0x0069, r25
 14e:	80 93 68 00 	sts	0x0068, r24
		/* Add a max value to the queue */
		add_in_cap_queue(0xFFFFFFFFu);
	}

	/* Call the sd converter handler at 7812.5 Hz (2000000 / 256)*/
	compute_output(prog_data.req_out);
 152:	40 91 76 00 	lds	r20, 0x0076
 156:	50 91 77 00 	lds	r21, 0x0077
static void compute_output(uint16_t val) {
	/* Dac output */
	uint16_t dac;

	/* 1 bit dac result and pin*/
	if(prog_data.ds_data.latch & DS_MAX) {
 15a:	80 91 74 00 	lds	r24, 0x0074
 15e:	90 91 75 00 	lds	r25, 0x0075
 162:	94 fd       	sbrc	r25, 4
 164:	36 c0       	rjmp	.+108    	; 0x1d2 <__vector_5+0xbe>
		dac = DS_MAX;
		PORTB |= (1u << OUT_PIN);
	} else {
		dac = 0;
		PORTB &= ~(1u << OUT_PIN);
 166:	c0 98       	cbi	0x18, 0	; 24
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
	}

	/* Compute the latch */
	prog_data.ds_data.latch = ((prog_data.ds_data.latch + val) - dac);
 16c:	80 91 74 00 	lds	r24, 0x0074
 170:	90 91 75 00 	lds	r25, 0x0075
 174:	84 0f       	add	r24, r20
 176:	95 1f       	adc	r25, r21
 178:	82 1b       	sub	r24, r18
 17a:	93 0b       	sbc	r25, r19
 17c:	90 93 75 00 	sts	0x0075, r25
 180:	80 93 74 00 	sts	0x0074, r24
 * @brief Timer 0 overflow vector
 */
ISR(TIM0_OVF_vect) {
	/* Call the handler */
	handle_capture_timer_irq();
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti
 * @brief Add element to capture queue
 * @param val
 */
static void add_in_cap_queue(uint32_t val) {
	/* Temporary queue index */
	uint8_t q_index = (prog_data.cap_data.index & (CAP_NUM_EVENTS - 1));
 1a2:	e0 91 6a 00 	lds	r30, 0x006A

	/* Add it in the queue */
	prog_data.cap_data.ev_queue[q_index] = val;
 1a6:	e1 70       	andi	r30, 0x01	; 1
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	e0 5a       	subi	r30, 0xA0	; 160
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	9f ef       	ldi	r25, 0xFF	; 255
 1ba:	af ef       	ldi	r26, 0xFF	; 255
 1bc:	bf ef       	ldi	r27, 0xFF	; 255
 1be:	80 83       	st	Z, r24
 1c0:	91 83       	std	Z+1, r25	; 0x01
 1c2:	a2 83       	std	Z+2, r26	; 0x02
 1c4:	b3 83       	std	Z+3, r27	; 0x03

	/* Increment the index */
	prog_data.cap_data.index++;
 1c6:	80 91 6a 00 	lds	r24, 0x006A
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 6a 00 	sts	0x006A, r24
 1d0:	c0 cf       	rjmp	.-128    	; 0x152 <__vector_5+0x3e>
	uint16_t dac;

	/* 1 bit dac result and pin*/
	if(prog_data.ds_data.latch & DS_MAX) {
		dac = DS_MAX;
		PORTB |= (1u << OUT_PIN);
 1d2:	c0 9a       	sbi	0x18, 0	; 24
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e1       	ldi	r19, 0x10	; 16
 1d8:	c9 cf       	rjmp	.-110    	; 0x16c <__vector_5+0x58>

000001da <main>:
}

/************************************************************************
 * @brief Main entry point
 */
void main(void) {
 1da:	2f 92       	push	r2
 1dc:	3f 92       	push	r3
 1de:	4f 92       	push	r4
 1e0:	5f 92       	push	r5
 1e2:	6f 92       	push	r6
 1e4:	7f 92       	push	r7
 1e6:	8f 92       	push	r8
 1e8:	9f 92       	push	r9
 1ea:	af 92       	push	r10
 1ec:	bf 92       	push	r11
 1ee:	cf 92       	push	r12
 1f0:	df 92       	push	r13
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
/************************************************************************
 * @brief Configure the GPIO peripheral
 */
static void configure_gpio(void) {
	/* Input pins */
	DDRB &= ~((1u << TACH_PIN) | (1u << POT_PIN));
 1fa:	87 b3       	in	r24, 0x17	; 23
 1fc:	89 7f       	andi	r24, 0xF9	; 249
 1fe:	87 bb       	out	0x17, r24	; 23

	/* Output pins */
	DDRB |= (1u << OUT_PIN);
 200:	b8 9a       	sbi	0x17, 0	; 23
/************************************************************************
 * @brief Configure the analog comparator
 */
static void configure_comparator(void) {
	/* Enable the bandgap */
	ACSR |= (1u << ACBG);
 202:	46 9a       	sbi	0x08, 6	; 8

	/* Enable the IRQ */
	ACSR |= (1u << ACIE);
 204:	43 9a       	sbi	0x08, 3	; 8
/************************************************************************
 * @brief Configure the ADC peripheral
 */
static void configure_adc(void) {
	/* ADC 1 */
	ADMUX |= (1u);
 206:	38 9a       	sbi	0x07, 0	; 7

	/* Disable digital buffers */
	DIDR0 |= ((1u << ADC1D) | (1 << AIN1D));
 208:	84 b3       	in	r24, 0x14	; 20
 20a:	86 60       	ori	r24, 0x06	; 6
 20c:	84 bb       	out	0x14, r24	; 20

	/* Select prescaler = 128 */
	ADCSRA |= ((1u << ADPS2) | (1u << ADPS1) | (1u << ADPS0));
 20e:	86 b1       	in	r24, 0x06	; 6
 210:	87 60       	ori	r24, 0x07	; 7
 212:	86 b9       	out	0x06, r24	; 6

	/* Enable the IRQ */
	ADCSRA |= (1u << ADIE);
 214:	33 9a       	sbi	0x06, 3	; 6

	/* Enable the peripheral */
	ADCSRA |= (1u << ADEN);
 216:	37 9a       	sbi	0x06, 7	; 6

	/* Start a conversion */
	ADCSRA |= (1u << ADSC);
 218:	36 9a       	sbi	0x06, 6	; 6
/************************************************************************
 * @brief Configure the system timer
 */
static void configure_sys_timer(void) {
	/* Set compare and top */
	OCR1A = (uint8_t)(F_CPU / TSAMP_PRE / SYS_TS);
 21a:	84 ef       	ldi	r24, 0xF4	; 244
 21c:	8e bd       	out	0x2e, r24	; 46
	OCR1C = (uint8_t)(F_CPU / TSAMP_PRE / SYS_TS);
 21e:	8d bd       	out	0x2d, r24	; 45

	/* Enable interrupt */
	TIMSK |= (1u << OCIE1A);
 220:	89 b7       	in	r24, 0x39	; 57
 222:	80 64       	ori	r24, 0x40	; 64
 224:	89 bf       	out	0x39, r24	; 57
#elif TSAMP_PRE == 4096
	TCCR1 |= ((1u << CTC1) | (1u << CS13) | (1u << CS12) | (1u << CS10));
#elif TSAMP_PRE == 8192
	TCCR1 |= ((1u << CTC1) | (1u << CS13) | (1u << CS12) | (1u << CS11));
#elif TSAMP_PRE == 16384
	TCCR1 |= ((1u << CTC1) | (1u << CS13) | (1u << CS12) | (1u << CS11) | (1u << CS10));
 226:	80 b7       	in	r24, 0x30	; 48
 228:	8f 68       	ori	r24, 0x8F	; 143
 22a:	80 bf       	out	0x30, r24	; 48
 */
static void configure_cap_timer(void) {
	/* Set the prescaler */
	/* We need a counter incrementing at about 2MHz */
	/* F_CPU / 2000000 = 8 */
	TCCR0B |= (1u << CS01);
 22c:	83 b7       	in	r24, 0x33	; 51
 22e:	82 60       	ori	r24, 0x02	; 2
 230:	83 bf       	out	0x33, r24	; 51

	/* Enable the IRQ */
	TIMSK |= (1u << TOIE0);
 232:	89 b7       	in	r24, 0x39	; 57
 234:	82 60       	ori	r24, 0x02	; 2
 236:	89 bf       	out	0x39, r24	; 57

	/* Configure the capture timer */
	configure_cap_timer();

	/* Enable the interrupts */
	sei();
 238:	78 94       	sei
	system_init();

	/* Main loop */
	while(TRUE) {
		/* Check for sync */
		if(prog_data.sync_req) {
 23a:	80 91 7a 00 	lds	r24, 0x007A
 23e:	88 23       	and	r24, r24
 240:	e1 f3       	breq	.-8      	; 0x23a <main+0x60>

	/* Known intial value */
	ave_samp = 0u;

	/* Disable interrupts */
	cli();
 242:	f8 94       	cli

	/* Sum all the variables */
	for(index = 0u; index < CAP_NUM_EVENTS; index++) {
		ave_samp += prog_data.cap_data.ev_queue[index];
 244:	a0 90 60 00 	lds	r10, 0x0060
 248:	b0 90 61 00 	lds	r11, 0x0061
 24c:	c0 90 62 00 	lds	r12, 0x0062
 250:	d0 90 63 00 	lds	r13, 0x0063
 254:	e0 90 64 00 	lds	r14, 0x0064
 258:	f0 90 65 00 	lds	r15, 0x0065
 25c:	00 91 66 00 	lds	r16, 0x0066
 260:	10 91 67 00 	lds	r17, 0x0067
	}

	/* Enable interrupts back */
	sei();
 264:	78 94       	sei
static uint16_t process_requested_setpoint(void) {
	/* Requested speed value */
	uint32_t rspeed = ((((uint32_t)(SPEED_MAX - SPEED_MIN) + 1u) * SCALE_FIX) / ADC_MAX);

	/* Apply fixed point scaling factor */
	rspeed = rspeed * prog_data.adc_val;
 266:	60 91 78 00 	lds	r22, 0x0078
 26a:	70 91 79 00 	lds	r23, 0x0079

	/* Scale and add to min */
	rspeed = (rspeed / SCALE_FIX) + SPEED_MIN;
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	2e ec       	ldi	r18, 0xCE	; 206
 274:	3b e2       	ldi	r19, 0x2B	; 43
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	b7 d0       	rcall	.+366    	; 0x3ea <__mulsi3>
 27c:	ec e0       	ldi	r30, 0x0C	; 12
 27e:	96 95       	lsr	r25
 280:	87 95       	ror	r24
 282:	77 95       	ror	r23
 284:	67 95       	ror	r22
 286:	ea 95       	dec	r30
 288:	d1 f7       	brne	.-12     	; 0x27e <__stack+0x1f>
 * @param fb Feedback
 * @return Output
 */
static uint16_t process_main_pid(uint16_t sp, uint16_t fb) {
	/* Error */
	int32_t err = ((int32_t)sp - (int32_t)fb);
 28a:	68 53       	subi	r22, 0x38	; 56
 28c:	7f 4f       	sbci	r23, 0xFF	; 255
 28e:	8f 4f       	sbci	r24, 0xFF	; 255
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	3b 01       	movw	r6, r22
 294:	88 24       	eor	r8, r8
 296:	99 24       	eor	r9, r9
 298:	ea 0c       	add	r14, r10
 29a:	fb 1c       	adc	r15, r11
 29c:	0c 1d       	adc	r16, r12
 29e:	1d 1d       	adc	r17, r13
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	7e e0       	ldi	r23, 0x0E	; 14
 2a4:	87 e2       	ldi	r24, 0x27	; 39
 2a6:	97 e0       	ldi	r25, 0x07	; 7
 2a8:	a8 01       	movw	r20, r16
 2aa:	97 01       	movw	r18, r14
 2ac:	b7 d0       	rcall	.+366    	; 0x41c <__udivmodsi4>
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	62 1a       	sub	r6, r18
 2b4:	73 0a       	sbc	r7, r19
 2b6:	84 0a       	sbc	r8, r20
 2b8:	95 0a       	sbc	r9, r21

	/* Apply the proportional gain fix .10 format*/
	out = err * (int32_t)(SYS_KP * (float)SCALE_FIX);

	/* Apply the derrivative term */
	der_temp = (err * (int32_t)DER_GAIN);
 2ba:	64 01       	movw	r12, r8
 2bc:	53 01       	movw	r10, r6
 2be:	aa 0c       	add	r10, r10
 2c0:	bb 1c       	adc	r11, r11
 2c2:	cc 1c       	adc	r12, r12
 2c4:	dd 1c       	adc	r13, r13
 2c6:	aa 0c       	add	r10, r10
 2c8:	bb 1c       	adc	r11, r11
 2ca:	cc 1c       	adc	r12, r12
 2cc:	dd 1c       	adc	r13, r13
	der_val = (der_temp - prog_data.pid_data.acc_der);
 2ce:	20 90 70 00 	lds	r2, 0x0070
 2d2:	30 90 71 00 	lds	r3, 0x0071
 2d6:	40 90 72 00 	lds	r4, 0x0072
 2da:	50 90 73 00 	lds	r5, 0x0073
	prog_data.pid_data.acc_der = der_temp;
 2de:	a0 92 70 00 	sts	0x0070, r10
 2e2:	b0 92 71 00 	sts	0x0071, r11
 2e6:	c0 92 72 00 	sts	0x0072, r12
 2ea:	d0 92 73 00 	sts	0x0073, r13
	out += der_val;

	/* Apply the integral term */
	int_val = (err * (int32_t)INT_GAIN); /* .10 */
 2ee:	c4 01       	movw	r24, r8
 2f0:	b3 01       	movw	r22, r6
 2f2:	27 ed       	ldi	r18, 0xD7	; 215
 2f4:	33 e0       	ldi	r19, 0x03	; 3
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	77 d0       	rcall	.+238    	; 0x3ea <__mulsi3>
 2fc:	7b 01       	movw	r14, r22
 2fe:	8c 01       	movw	r16, r24
	int_val = int_val + prog_data.pid_data.acc_int; /* .10 */
 300:	80 91 6c 00 	lds	r24, 0x006C
 304:	90 91 6d 00 	lds	r25, 0x006D
 308:	a0 91 6e 00 	lds	r26, 0x006E
 30c:	b0 91 6f 00 	lds	r27, 0x006F
 310:	e8 0e       	add	r14, r24
 312:	f9 1e       	adc	r15, r25
 314:	0a 1f       	adc	r16, r26
 316:	1b 1f       	adc	r17, r27
	out += int_val;

	/* Saturate integrator*/
	if(prog_data.pid_data.acc_int > INT_SAT) {
 318:	80 91 6c 00 	lds	r24, 0x006C
 31c:	90 91 6d 00 	lds	r25, 0x006D
 320:	a0 91 6e 00 	lds	r26, 0x006E
 324:	b0 91 6f 00 	lds	r27, 0x006F
 328:	81 50       	subi	r24, 0x01	; 1
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	a0 40       	sbci	r26, 0x00	; 0
 32e:	b1 40       	sbci	r27, 0x01	; 1
 330:	cc f1       	brlt	.+114    	; 0x3a4 <__stack+0x145>
		prog_data.pid_data.acc_int = INT_SAT;
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	a0 e0       	ldi	r26, 0x00	; 0
 338:	b1 e0       	ldi	r27, 0x01	; 1
 33a:	80 93 6c 00 	sts	0x006C, r24
 33e:	90 93 6d 00 	sts	0x006D, r25
 342:	a0 93 6e 00 	sts	0x006E, r26
 346:	b0 93 6f 00 	sts	0x006F, r27
	/* Apply the proportional gain fix .10 format*/
	out = err * (int32_t)(SYS_KP * (float)SCALE_FIX);

	/* Apply the derrivative term */
	der_temp = (err * (int32_t)DER_GAIN);
	der_val = (der_temp - prog_data.pid_data.acc_der);
 34a:	c4 01       	movw	r24, r8
 34c:	b3 01       	movw	r22, r6
 34e:	29 e9       	ldi	r18, 0x99	; 153
 350:	31 e1       	ldi	r19, 0x11	; 17
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	49 d0       	rcall	.+146    	; 0x3ea <__mulsi3>
 358:	6a 0d       	add	r22, r10
 35a:	7b 1d       	adc	r23, r11
 35c:	8c 1d       	adc	r24, r12
 35e:	9d 1d       	adc	r25, r13
	prog_data.pid_data.acc_der = der_temp;
	out += der_val;
 360:	62 19       	sub	r22, r2
 362:	73 09       	sbc	r23, r3
 364:	84 09       	sbc	r24, r4
 366:	95 09       	sbc	r25, r5

	/* Apply the integral term */
	int_val = (err * (int32_t)INT_GAIN); /* .10 */
	int_val = int_val + prog_data.pid_data.acc_int; /* .10 */
	out += int_val;
 368:	e6 0e       	add	r14, r22
 36a:	f7 1e       	adc	r15, r23
 36c:	08 1f       	adc	r16, r24
 36e:	19 1f       	adc	r17, r25
	} else {
		prog_data.pid_data.acc_int = int_val;
	}

	/* Normalize the result */
	out = out / SCALE_FIX;
 370:	c8 01       	movw	r24, r16
 372:	b7 01       	movw	r22, r14
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e1       	ldi	r19, 0x10	; 16
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	71 d0       	rcall	.+226    	; 0x460 <__divmodsi4>
 37e:	c9 01       	movw	r24, r18
 380:	da 01       	movw	r26, r20

	/* Add the offset */
	out += SYS_OFS;

	/* Return the saturated output */
	if(out > (DS_MAX - 1)) {
 382:	80 30       	cpi	r24, 0x00	; 0
 384:	20 e1       	ldi	r18, 0x10	; 16
 386:	92 07       	cpc	r25, r18
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	a2 07       	cpc	r26, r18
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	b2 07       	cpc	r27, r18
 390:	e4 f0       	brlt	.+56     	; 0x3ca <__stack+0x16b>
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	3f e0       	ldi	r19, 0x0F	; 15

	/* Current setpoint */
	uint16_t sp_req = process_requested_setpoint();

	/* Update the requested output */
	prog_data.req_out = process_main_pid(sp_req, fb_speed);
 396:	30 93 77 00 	sts	0x0077, r19
 39a:	20 93 76 00 	sts	0x0076, r18
		if(prog_data.sync_req) {
			/*Run the process controller */
			process_controller();

			/* Reset the flag */
			prog_data.sync_req = FALSE;
 39e:	10 92 7a 00 	sts	0x007A, r1
 3a2:	4b cf       	rjmp	.-362    	; 0x23a <main+0x60>
	out += int_val;

	/* Saturate integrator*/
	if(prog_data.pid_data.acc_int > INT_SAT) {
		prog_data.pid_data.acc_int = INT_SAT;
	} else if(prog_data.pid_data.acc_int < 0) {
 3a4:	80 91 6c 00 	lds	r24, 0x006C
 3a8:	90 91 6d 00 	lds	r25, 0x006D
 3ac:	a0 91 6e 00 	lds	r26, 0x006E
 3b0:	b0 91 6f 00 	lds	r27, 0x006F
 3b4:	b7 fd       	sbrc	r27, 7
 3b6:	0d c0       	rjmp	.+26     	; 0x3d2 <__stack+0x173>
		prog_data.pid_data.acc_int = 0;
	} else {
		prog_data.pid_data.acc_int = int_val;
 3b8:	e0 92 6c 00 	sts	0x006C, r14
 3bc:	f0 92 6d 00 	sts	0x006D, r15
 3c0:	00 93 6e 00 	sts	0x006E, r16
 3c4:	10 93 6f 00 	sts	0x006F, r17
 3c8:	c0 cf       	rjmp	.-128    	; 0x34a <__stack+0xeb>
	out += SYS_OFS;

	/* Return the saturated output */
	if(out > (DS_MAX - 1)) {
		return (DS_MAX - 1);
	} else if(out < 0) {
 3ca:	b7 fd       	sbrc	r27, 7
 3cc:	0b c0       	rjmp	.+22     	; 0x3e4 <__stack+0x185>
		return 0;
	} else {
		return (uint16_t)out;
 3ce:	9c 01       	movw	r18, r24
 3d0:	e2 cf       	rjmp	.-60     	; 0x396 <__stack+0x137>

	/* Saturate integrator*/
	if(prog_data.pid_data.acc_int > INT_SAT) {
		prog_data.pid_data.acc_int = INT_SAT;
	} else if(prog_data.pid_data.acc_int < 0) {
		prog_data.pid_data.acc_int = 0;
 3d2:	10 92 6c 00 	sts	0x006C, r1
 3d6:	10 92 6d 00 	sts	0x006D, r1
 3da:	10 92 6e 00 	sts	0x006E, r1
 3de:	10 92 6f 00 	sts	0x006F, r1
 3e2:	b3 cf       	rjmp	.-154    	; 0x34a <__stack+0xeb>
	out += SYS_OFS;

	/* Return the saturated output */
	if(out > (DS_MAX - 1)) {
		return (DS_MAX - 1);
	} else if(out < 0) {
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	d6 cf       	rjmp	.-84     	; 0x396 <__stack+0x137>

000003ea <__mulsi3>:
 3ea:	ff 27       	eor	r31, r31
 3ec:	ee 27       	eor	r30, r30
 3ee:	bb 27       	eor	r27, r27
 3f0:	aa 27       	eor	r26, r26

000003f2 <__mulsi3_loop>:
 3f2:	60 ff       	sbrs	r22, 0
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <__mulsi3_skip1>
 3f6:	a2 0f       	add	r26, r18
 3f8:	b3 1f       	adc	r27, r19
 3fa:	e4 1f       	adc	r30, r20
 3fc:	f5 1f       	adc	r31, r21

000003fe <__mulsi3_skip1>:
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	44 1f       	adc	r20, r20
 404:	55 1f       	adc	r21, r21
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	77 95       	ror	r23
 40c:	67 95       	ror	r22
 40e:	89 f7       	brne	.-30     	; 0x3f2 <__mulsi3_loop>
 410:	00 97       	sbiw	r24, 0x00	; 0
 412:	76 07       	cpc	r23, r22
 414:	71 f7       	brne	.-36     	; 0x3f2 <__mulsi3_loop>

00000416 <__mulsi3_exit>:
 416:	cf 01       	movw	r24, r30
 418:	bd 01       	movw	r22, r26
 41a:	08 95       	ret

0000041c <__udivmodsi4>:
 41c:	a1 e2       	ldi	r26, 0x21	; 33
 41e:	1a 2e       	mov	r1, r26
 420:	aa 1b       	sub	r26, r26
 422:	bb 1b       	sub	r27, r27
 424:	fd 01       	movw	r30, r26
 426:	0d c0       	rjmp	.+26     	; 0x442 <__udivmodsi4_ep>

00000428 <__udivmodsi4_loop>:
 428:	aa 1f       	adc	r26, r26
 42a:	bb 1f       	adc	r27, r27
 42c:	ee 1f       	adc	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	a2 17       	cp	r26, r18
 432:	b3 07       	cpc	r27, r19
 434:	e4 07       	cpc	r30, r20
 436:	f5 07       	cpc	r31, r21
 438:	20 f0       	brcs	.+8      	; 0x442 <__udivmodsi4_ep>
 43a:	a2 1b       	sub	r26, r18
 43c:	b3 0b       	sbc	r27, r19
 43e:	e4 0b       	sbc	r30, r20
 440:	f5 0b       	sbc	r31, r21

00000442 <__udivmodsi4_ep>:
 442:	66 1f       	adc	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	1a 94       	dec	r1
 44c:	69 f7       	brne	.-38     	; 0x428 <__udivmodsi4_loop>
 44e:	60 95       	com	r22
 450:	70 95       	com	r23
 452:	80 95       	com	r24
 454:	90 95       	com	r25
 456:	9b 01       	movw	r18, r22
 458:	ac 01       	movw	r20, r24
 45a:	bd 01       	movw	r22, r26
 45c:	cf 01       	movw	r24, r30
 45e:	08 95       	ret

00000460 <__divmodsi4>:
 460:	97 fb       	bst	r25, 7
 462:	09 2e       	mov	r0, r25
 464:	05 26       	eor	r0, r21
 466:	0e d0       	rcall	.+28     	; 0x484 <__divmodsi4_neg1>
 468:	57 fd       	sbrc	r21, 7
 46a:	04 d0       	rcall	.+8      	; 0x474 <__divmodsi4_neg2>
 46c:	d7 df       	rcall	.-82     	; 0x41c <__udivmodsi4>
 46e:	0a d0       	rcall	.+20     	; 0x484 <__divmodsi4_neg1>
 470:	00 1c       	adc	r0, r0
 472:	38 f4       	brcc	.+14     	; 0x482 <__divmodsi4_exit>

00000474 <__divmodsi4_neg2>:
 474:	50 95       	com	r21
 476:	40 95       	com	r20
 478:	30 95       	com	r19
 47a:	21 95       	neg	r18
 47c:	3f 4f       	sbci	r19, 0xFF	; 255
 47e:	4f 4f       	sbci	r20, 0xFF	; 255
 480:	5f 4f       	sbci	r21, 0xFF	; 255

00000482 <__divmodsi4_exit>:
 482:	08 95       	ret

00000484 <__divmodsi4_neg1>:
 484:	f6 f7       	brtc	.-4      	; 0x482 <__divmodsi4_exit>
 486:	90 95       	com	r25
 488:	80 95       	com	r24
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	08 95       	ret

00000496 <_exit>:
 496:	f8 94       	cli

00000498 <__stop_program>:
 498:	ff cf       	rjmp	.-2      	; 0x498 <__stop_program>
